// Mocks generated by Mockito 5.4.4 from annotations
// in spantry/test/firestore_test/edit_delete_recipes_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i5;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:spantry/model/recipe.dart' as _i7;
import 'package:spantry/services/firestore/recipe_management.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCollectionReference_0<T extends Object?> extends _i1.SmartFake
    implements _i2.CollectionReference<T> {
  _FakeCollectionReference_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RecipeManagement].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipeManagement extends _i1.Mock implements _i3.RecipeManagement {
  @override
  _i2.CollectionReference<Object?> get recipes => (super.noSuchMethod(
        Invocation.getter(#recipes),
        returnValue: _FakeCollectionReference_0<Object?>(
          this,
          Invocation.getter(#recipes),
        ),
        returnValueForMissingStub: _FakeCollectionReference_0<Object?>(
          this,
          Invocation.getter(#recipes),
        ),
      ) as _i2.CollectionReference<Object?>);

  @override
  _i4.Future<String> uploadImageToStorage(
    String? childName,
    _i5.Uint8List? file,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadImageToStorage,
          [
            childName,
            file,
          ],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #uploadImageToStorage,
            [
              childName,
              file,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #uploadImageToStorage,
            [
              childName,
              file,
            ],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<void> addRecipe(_i7.Recipe? recipe) => (super.noSuchMethod(
        Invocation.method(
          #addRecipe,
          [recipe],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<_i2.QuerySnapshot<Object?>> getRecipesStream() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecipesStream,
          [],
        ),
        returnValue: _i4.Stream<_i2.QuerySnapshot<Object?>>.empty(),
        returnValueForMissingStub:
            _i4.Stream<_i2.QuerySnapshot<Object?>>.empty(),
      ) as _i4.Stream<_i2.QuerySnapshot<Object?>>);

  @override
  _i4.Future<void> updateRecipe(_i7.Recipe? updatedRecipe) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRecipe,
          [updatedRecipe],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteRecipe(_i7.Recipe? recipe) => (super.noSuchMethod(
        Invocation.method(
          #deleteRecipe,
          [recipe],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> syncRecipesWithLocalDatabase() => (super.noSuchMethod(
        Invocation.method(
          #syncRecipesWithLocalDatabase,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Recipe].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipe extends _i1.Mock implements _i7.Recipe {
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  int get persons => (super.noSuchMethod(
        Invocation.getter(#persons),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String get description => (super.noSuchMethod(
        Invocation.getter(#description),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#description),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#description),
        ),
      ) as String);

  @override
  String get ingredients => (super.noSuchMethod(
        Invocation.getter(#ingredients),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#ingredients),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#ingredients),
        ),
      ) as String);

  @override
  set uid(String? _uid) => super.noSuchMethod(
        Invocation.setter(
          #uid,
          _uid,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get time => (super.noSuchMethod(
        Invocation.getter(#time),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set image(String? _image) => super.noSuchMethod(
        Invocation.setter(
          #image,
          _image,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> json() => (super.noSuchMethod(
        Invocation.method(
          #json,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
