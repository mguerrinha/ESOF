// Mocks generated by Mockito 5.4.4 from annotations
// in spantry/test/search_test/search_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:spantry/model/product.dart' as _i6;
import 'package:spantry/services/firestore/product_management.dart' as _i4;
import 'package:spantry/services/notification/local_notifications.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCollectionReference_0<T extends Object?> extends _i1.SmartFake
    implements _i2.CollectionReference<T> {
  _FakeCollectionReference_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalNotifications_1 extends _i1.SmartFake
    implements _i3.LocalNotifications {
  _FakeLocalNotifications_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductManagement].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductManagement extends _i1.Mock implements _i4.ProductManagement {
  @override
  _i2.CollectionReference<Object?> get products => (super.noSuchMethod(
        Invocation.getter(#products),
        returnValue: _FakeCollectionReference_0<Object?>(
          this,
          Invocation.getter(#products),
        ),
        returnValueForMissingStub: _FakeCollectionReference_0<Object?>(
          this,
          Invocation.getter(#products),
        ),
      ) as _i2.CollectionReference<Object?>);

  @override
  _i2.CollectionReference<Object?> get all_products => (super.noSuchMethod(
        Invocation.getter(#all_products),
        returnValue: _FakeCollectionReference_0<Object?>(
          this,
          Invocation.getter(#all_products),
        ),
        returnValueForMissingStub: _FakeCollectionReference_0<Object?>(
          this,
          Invocation.getter(#all_products),
        ),
      ) as _i2.CollectionReference<Object?>);

  @override
  _i3.LocalNotifications get localNotifications => (super.noSuchMethod(
        Invocation.getter(#localNotifications),
        returnValue: _FakeLocalNotifications_1(
          this,
          Invocation.getter(#localNotifications),
        ),
        returnValueForMissingStub: _FakeLocalNotifications_1(
          this,
          Invocation.getter(#localNotifications),
        ),
      ) as _i3.LocalNotifications);

  @override
  _i5.Future<void> addProduct(_i6.Product? product) => (super.noSuchMethod(
        Invocation.method(
          #addProduct,
          [product],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<_i2.QuerySnapshot<Object?>> getProductsStream() =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductsStream,
          [],
        ),
        returnValue: _i5.Stream<_i2.QuerySnapshot<Object?>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<_i2.QuerySnapshot<Object?>>.empty(),
      ) as _i5.Stream<_i2.QuerySnapshot<Object?>>);

  @override
  _i5.Stream<_i2.QuerySnapshot<Object?>> getSpecificProductsStream(
          String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSpecificProductsStream,
          [name],
        ),
        returnValue: _i5.Stream<_i2.QuerySnapshot<Object?>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<_i2.QuerySnapshot<Object?>>.empty(),
      ) as _i5.Stream<_i2.QuerySnapshot<Object?>>);

  @override
  _i5.Stream<_i2.QuerySnapshot<Object?>> getAllProductsStream() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllProductsStream,
          [],
        ),
        returnValue: _i5.Stream<_i2.QuerySnapshot<Object?>>.empty(),
        returnValueForMissingStub:
            _i5.Stream<_i2.QuerySnapshot<Object?>>.empty(),
      ) as _i5.Stream<_i2.QuerySnapshot<Object?>>);

  @override
  _i5.Future<void> updateProduct(
    _i6.Product? newProduct,
    int? update,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [
            newProduct,
            update,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteProduct(_i6.Product? product) => (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [product],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteProductCollection(_i6.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProductCollection,
          [product],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> syncProductsWithLocalDatabase() => (super.noSuchMethod(
        Invocation.method(
          #syncProductsWithLocalDatabase,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
